package de.dmos.rtsync.server;

import java.awt.Color;
import java.io.Serializable;
import java.security.Principal;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.messaging.simp.user.SimpUserRegistry;

import de.dmos.rtsync.message.Subscriber;
import de.dmos.rtsync.network.CommunicationConstants;
import de.dmos.rtsync.serializers.MessageSerialization;

/**
 * A simple {@link Principal} that allows the client to set their preferred name and color.
 *
 * @author <a href="mailto:michael.danzig@dmos2002.de">Michael Danzig</a>
 * @version $Rev$
 *
 */
public class SimpleUnauthorizedPrincipal implements Principal, Serializable
{
  /**
   * docme: serialVersionUID
   */
  private static final long serialVersionUID = 1L;

  @Autowired
  private static SimpUserRegistry userRegistry;

  private final long        _id;
  private final String		_autoGeneratedName;
  private final Subscriber _subscriber;

  public SimpleUnauthorizedPrincipal(HttpHeaders headers)
  {
	UUID uuid = UUID.randomUUID();
	_id = uuid.getLeastSignificantBits();
	String generatedName;
	generatedName = uuidToName(uuid);
	while (isNameTakenAlready(generatedName))
	{
	  generatedName = uuidToName(UUID.randomUUID());
	}
	_autoGeneratedName = generatedName;

	String preferredName = getFirstStringFromHeaders(headers, CommunicationConstants.PREFERRED_NAME_HEADER);

	String preferredColorString =
		getFirstStringFromHeaders(headers, CommunicationConstants.PREFERRED_COLOR_HEADER);
	Color preferredColor = preferredColorString != null
		? MessageSerialization.COLOR_SERIALIZER.tryParseColor(preferredColorString)
			: null;
	preferredColor = preferredColor != null ? preferredColor : createDarkerColorFromId();

	_subscriber = new Subscriber(_id, getSuitableName(preferredName), preferredColor);
  }

  private String uuidToName(UUID uuid)
  {
	return "User " + uuid.toString().substring(0, 5);
  }

  private String getFirstStringFromHeaders(HttpHeaders headers, String field)
  {
	List<String> fieldValues = headers.getOrEmpty(field);
	return !fieldValues.isEmpty() ? fieldValues.get(0) : null;
  }

  @Override
  public String getName()
  {
	return _subscriber.getName();
  }

  public boolean isNameTakenAlready(String name) {
	return userRegistry != null && userRegistry.getUser(name) != null;
  }

  private String getSuitableName(String preferredName)
  {
	if ( preferredName == null )
	{
	  return _autoGeneratedName;
	}
	String strippedName = preferredName.strip();
	return !strippedName.isBlank() && !isNameTakenAlready(strippedName) ? strippedName : _autoGeneratedName;
  }

  public void setName(String newName)
  {
	_subscriber.setName(getSuitableName(newName));
  }

  public void setColor(Color newColor)
  {
	_subscriber.setColor(newColor);
  }

  public Subscriber getSubscriber()
  {
	return _subscriber;
  }

  public void resetColor()
  {
	setColor(createDarkerColorFromId());
  }

  private Color createDarkerColorFromId()
  {
	return new Color((int) _id).darker();
  }
}